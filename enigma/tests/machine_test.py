import unittest

from enigma import Machine
from enigma.builtin_rotors import Rotors
from enigma.tests.data.sample import sample_long_input, sample_a


class MachineTest(unittest.TestCase):
    def test_I_II_III_rB_010101_AAZ(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["B"]()
        )
        machine.set_rotor_settings(
            [1, 1, 1]
        )
        machine.set_rotor_positions(
            ["A", "A", "Z"]
        )

        self.assertEqual(machine.encode("ALEJANDRO"), "UPLDGCVNQ")

    def test_I_II_III_rB_010101_AAZ_long(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["B"]()
        )
        machine.set_rotor_settings(
            [1, 1, 1]
        )
        machine.set_rotor_positions(
            ["A", "A", "Z"]
        )

        self.maxDiff = None
        self.assertEqual(machine.encode(sample_long_input

    def test_II_III_IV_rC_101505_ABC_long(self):
        machine = Machine(
            [Rotors["II"](), Rotors["III"](), Rotors["IV"]()],
            Rotors["C"]()
        )
        machine.set_rotor_settings(
            [10, 15, 5]
        )
        machine.set_rotor_positions(
            ["A", "B", "C"]
        )

        self.maxDiff = None
        self.assertEqual(machine.encode(sample_long_input

    def test_II_III_IV_rC_111519_EVZ_long(self):
        machine = Machine(
            [Rotors["II"](), Rotors["III"](), Rotors["IV"]()],
            Rotors["C"]()
        )
        machine.set_rotor_settings(
            [11, 15, 19]
        )
        machine.set_rotor_positions(
            ["E", "V", "Z"]
        )

        self.maxDiff = None
        self.assertEqual(machine.encode(sample_long_input

    def test_I_II_III_rB_010101_AAA(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["B"]()
        )
        machine.set_rotor_settings(
            [1, 1, 1]
        )
        machine.set_rotor_positions(
            ["A", "A", "A"]
        )

        self.assertEqual(machine.encode("ALEJANDRO"), "BECZOEFTM")

    def test_I_II_III_rB_010101_QEV(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["B"]()
        )
        machine.set_rotor_settings(
            [1, 1, 1]
        )
        machine.set_rotor_positions(
            ["Q", "E", "V"]
        )

        self.assertEqual(machine.encode("ALEJANDRO"), "LVNAGPPQY")

    def test_IV_V_BETA_rB_140924_AAA(self):
        machine = Machine(
            [Rotors["IV"](), Rotors["V"](), Rotors["Beta"]()],
            Rotors["B"]()
        )
        machine.set_rotor_settings(
            [14, 9, 24]
        )
        machine.set_rotor_positions(
            ["A", "A", "A"]
        )

        self.assertEqual(machine.encode("H"), "Y")
    
    def test_I_II_III_rC_071115_QEV(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["C"]()
        )
        machine.set_rotor_settings(
            [7, 11, 15]
        )
        machine.set_rotor_positions(
            ["Q", "E", "V"]
        )

        self.assertEqual(
            machine.encode("ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ ZZZZZ"),
            "MTMWF VPXNL XXFVD NROIN BRDDX VRUBE YFEEM AHGGJ QLNQH FEKSV EPUKV OBLYJ AVFSV MLSPE XBDVU XJUNO NJKIF VVPUI"
        )

    def test_I_II_III_IV_rC_07111519_QEVZ(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"](), Rotors["IV"]()],
            Rotors["C"]()
        )
        machine.set_rotor_settings(
            [7, 11, 15, 19]
        )
        machine.set_rotor_positions(
            ["Q", "E", "V", "Z"]
        )

        self.assertEqual(machine.encode("Z"), "V")
    
    def test_Beta_I_III_IV_rBthin_01010101_AAAA(self):
        machine = Machine(
            [Rotors["Beta"](), Rotors["I"](), Rotors["III"](), Rotors["IV"]()],
            Rotors["B-thin"]()
        )
        machine.set_rotor_settings(
            [1, 1, 1, 1]
        )
        machine.set_rotor_positions(
            ["A", "A", "A", "A"]
        )

        self.assertEqual(machine.encode("ALEJANDRO"), "ORXKMBHHN")
    
    def test_Beta_I_III_IV_rBthin_01171201_AAAA(self):
        machine = Machine(
            [Rotors["Beta"](), Rotors["I"](), Rotors["III"](), Rotors["IV"]()],
            Rotors["B-thin"]()
        )
        machine.set_rotor_settings(
            [1, 17, 12, 1]
        )
        machine.set_rotor_positions(
            ["A", "A", "A", "A"]
        )

        self.assertEqual(machine.encode("ALEJANDRO"), "RTVHLSWJH")

    def test_I_II_III_rB_071115_QEV(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["B"]()
        )
        machine.set_rotor_settings(
            [7, 11, 15]
        )
        machine.set_rotor_positions(
            ["Q", "E", "V"]
        )

        self.assertEqual(machine.encode("ALEJANDRO"), "IBVFUMNND")

    def test_double_steps(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["B"]()
        )
        machine.set_rotor_positions(
            ["A", "D", "U"]
        )

        self.assertEqual(
            machine.encode(sample_a),
            "EQIBM GFJBW ZFCKP FMGBX QCIVI BBRNC OCJUV YDKMV JPFMD RMTGL WFOZL XGJEY YQPVP BWNCK VKLZT"
        )

    def test_sentence_1(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["B"]()
        )

        machine.set_rotor_settings(
            [1, 1, 1]
        )
        machine.set_rotor_positions(
            ["A", "A", "Z"]
        )
        machine.set_plugboard_mappings("HL MO AJ CX BZ SR NI YW DG PK")

        self.assertEqual(machine.encode("HELLOWORLD"), "RFKTMBXVVW")

    def test_sentence_2(self):
        machine = Machine(
            [Rotors["IV"](), Rotors["V"](), Rotors["Beta"](), Rotors["I"]()],
            Rotors["A"]()
        )

        machine.set_rotor_settings(
            [18, 24, 3, 5]
        )
        machine.set_rotor_positions(
            ["E", "Z", "G", "P"]
        )
        machine.set_plugboard_mappings("PC XZ FM QA ST NB HY OR EV IU")

        self.assertEqual(machine.encode("BUPXWJCDPFASXBDHLBBIBSRNWCSZXQOLBNXYAXVHOGCUUIBCVMPUZYUUKHI"),
                         "CONGRATULATIONSONPRODUCINGYOURWORKINGENIGMAMACHINESIMULATOR")
    
    def test_rotation(self):
        machine = Machine(
            [Rotors["I"](), Rotors["II"](), Rotors["III"]()],
            Rotors["A"]()
        )

        machine.set_rotor_positions(
            ["A", "C", "U"]
        )

        self.assertEqual(machine._get_positions(), "ACU")
        machine.encode("A")
        self.assertEqual(machine._get_positions(), "ACV")
        machine.encode("A")
        self.assertEqual(machine._get_positions(), "ADW")
        machine.encode("AAAAAAAAAAAAAAAAAAAAAAAA")
        self.assertEqual(machine._get_positions(), "ADU")
        machine.encode("A")
        self.assertEqual(machine._get_positions(), "ADV")
        machine.encode("A")
        self.assertEqual(machine._get_positions(), "AEW")
        machine.encode("A")
        self.assertEqual(machine._get_positions(), "BFX")
        machine.encode("A")
        self.assertEqual(machine._get_positions(), "BFY")


if __name__ == '__main__':
    unittest.main()
